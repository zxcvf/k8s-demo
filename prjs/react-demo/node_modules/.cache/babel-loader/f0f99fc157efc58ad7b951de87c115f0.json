{"ast":null,"code":"import Big from \"big.js\";\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\" : \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n\n  if (operation === \"รท\") {\n    if (two === \"0\") {\n      alert(\"Divide by 0 error\");\n      return \"0\";\n    } else {\n      return one.div(two).toString();\n    }\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n}","map":{"version":3,"sources":["C:/Users/67355/Desktop/prjs/react-demo/src/logic/operate.js"],"names":["Big","operate","numberOne","numberTwo","operation","one","two","plus","toString","minus","times","alert","div","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,eAAe,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,SAAvC,EAAkD;AAC/D,QAAMC,GAAG,GAAGL,GAAG,CAACE,SAAS,IAAI,GAAd,CAAf;AACA,QAAMI,GAAG,GAAGN,GAAG,CAACG,SAAS,KAAKC,SAAS,KAAK,GAAd,IAAqBA,SAAS,KAAK,GAAnC,GAAyC,GAAzC,GAA8C,GAAnD,CAAV,CAAf,CAF+D,CAEoB;;AACnF,MAAIA,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACE,IAAJ,CAASD,GAAT,EAAcE,QAAd,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACI,KAAJ,CAAUH,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACK,KAAJ,CAAUJ,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,QAAIE,GAAG,KAAK,GAAZ,EAAiB;AACfK,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,aAAO,GAAP;AACD,KAHD,MAGO;AACL,aAAON,GAAG,CAACO,GAAJ,CAAQN,GAAR,EAAaE,QAAb,EAAP;AACD;AACF;;AACD,QAAMK,KAAK,CAAE,sBAAqBT,SAAU,GAAjC,CAAX;AACD","sourcesContent":["import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"รท\") {\n    if (two === \"0\") {\n      alert(\"Divide by 0 error\");\n      return \"0\";\n    } else {\n      return one.div(two).toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n"]},"metadata":{},"sourceType":"module"}